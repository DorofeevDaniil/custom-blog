Автотесты — это важная часть нашей работы, именно они помогают в ее ускорении и снимают рутинную работу с наших
тестировщиков. Быстрее проверки, меньше зависимости от человеческого фактора, меньше риск ошибок. А еще (хоть это и не
доказано), думаю, автотесты положительно влияют на наш сон. Спится спокойнее, когда покрыты все важные сценарии. Для
всех этих плюсов необходимо не только наличие автотестов, но и возможность добавлять новые, обновлять их и регулярно
запускать.

Привет! Меня зовут Александра Смирнова, я старший фронтенд-разработчик в команде Календаря, VK WorkSpace в компании
VK Tech. На момент начала работы нашей команды в B2B-Календаре для нашего окружения не было отдельных тестов. Мы прошли
непростой путь, перед тем как начать писать тесты для B2B-окружения. Хотим рассказать, как встроили наши тесты в
существующую инфраструктуру и наладили процессы для их стабильного прохождения. Для краткости я буду называть их
«автотесты» или просто «тесты», имея в виду именно интеграционный вид тестирования.

Краткое введение
Как быть, если вы перешли в новый проект, над которым работают несколько команд, а под ваше окружение нет тестов? Как
писать новые фичи и быть уверенными, что они не сломали что-то в чужом окружении? Именно этими вопросами задавалась наша
команда в начале работы над B2B-Календарем.

Параллельно с нами в одном репозитории работала команда, пишущая фичи для B2C-календаря. И мы хотели быть уверенными,
что при разработке не ломаем ничего не только у себя, но и у них. Инфраструктура у параллельной команды отличалась от
нашей: разные процессы раскатки кода на стенды, совершенно разные способы настройки фичей, да и сами фичи заточены под
разные задачи, а также у B2B больше тестовых стендов, каждый из которых может быть настроен по-своему.

У ребят уже был набор интеграционных тестов, заточенных под B2C-окружение. Тесты хранились в отдельном репозитории
вместе с тестами других проектов. Нам в B2B предстояло решить, как подружить наши новые тесты Календаря с уже
существующими, избежать сильного разделения между окружениями и вписать автоматизированное тестирование в процесс
команд, работающих над проектом.

Сначала мы думали хранить свои тесты отдельно, но постепенно склонялись к идее хранить их там же, где уже были тесты
проекта, пусть и для другого окружения. Тогда не пришлось бы создавать инфраструктуру с нуля — ведь там уже есть тесты
многих проектов и много общих утилит. С помощью ранера удобно запускать тесты для любых проектов, настроен CI,
подключены боты и другое. В итоге решили сделать именно так.

Продолжение читать тут: https://habr.com/ru/companies/vktech/articles/914906/